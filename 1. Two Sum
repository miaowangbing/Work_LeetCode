Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
UPDATE (2016/2/13):
The return format had been changed to zero-based indices. Please read the above updated description carefully.

第一种方法：暴力法
The brute force approach is simple. Loop through each element x and find if there is another value that equals to target – x. As finding another value requires looping through the rest of array, its runtime complexity is O(n2).

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        //暴力法
        int len=nums.size(),new_target;
        vector<int> res(2,0);
        for(int i=0;i<len-1;++i){
            for(int j=i+1;j<len;++j){
                if(nums[i]+nums[j]==target){
                    res[0]=i;
                    res[1]=j;
                    return res;
                }
            }
        }
        return res;
    }
};

第二种方法：哈希表
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {//哈希表 时间复杂度O(n) 空间复杂度O(n)
        unordered_map<int,int> pos;
        vector<int> res(2,0);
        int len=nums.size();
        for(int i=0;i<len;++i){
            int x=target-nums[i];
            if(pos.count(x)!=0){
                res[0]=pos[x];
                res[1]=i;
                return res;
            }
            pos[nums[i]]=i;
        }
        return res;
    }
};
