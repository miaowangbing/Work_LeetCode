Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {//快慢指针
        if(head==NULL||head->next==NULL)//head为空或者只有一个结点
            return NULL;  
        ListNode *p=head,*q=head;
        for(int i=0;i<n;++i)
            p=p->next;//快指针先走n步
        if(p==NULL)return head->next;//若需要删除的结点为head
        while(p->next!=NULL){
            p=p->next;//p向后走一步
            q=q->next;//q向后走一步(q即记录下需要删除节点的前驱结点)
        }
        q->next=q->next->next;//删除节点
        return head;
    }
};
